// 管道操作符
https://mongodb.net.cn/manual/reference/operator/aggregation-pipeline/


db.students2.updateMany( {},
  [
    { $replaceRoot: { newRoot:
       { $mergeObjects: [ { quiz1: 0, quiz2: 0, test1: 0, test2: 0 }, "$$ROOT" ] }
    } },
    { $set: { modified: "$$NOW"}  }
  ]
)
当属性缺失时补充默认值
附带 $mergeObjects 表达式的 $replaceRoot 阶段，以便为 quiz1、quiz2、test1 和 test2 字段设置默认值。聚合变量 ROOT 是指当前修改的文档。要访问此变量，请将 $ 用作前缀，并用引号括起来。当前文档字段将覆盖这些默认值。

db.students2.find({modified:{$lt: new Date()}}) 根据当时时间过滤

db.students3.updateMany(
   { },
   [
     { $set: { average : { $trunc: [ { $avg: "$tests" }, 0 ] }, modified: "$$NOW" } },
     { $set: { grade: { $switch: {
                           branches: [
                               { case: { $gte: [ "$average", 90 ] }, then: "A" },
                               { case: { $gte: [ "$average", 80 ] }, then: "B" },
                               { case: { $gte: [ "$average", 70 ] }, then: "C" },
                               { case: { $gte: [ "$average", 60 ] }, then: "D" }
                           ],
                           default: "F"
     } } } }
   ]
)
$trunc 小数位数截取

$project 将带有请求字段的文档传递到管道的下一个阶段。指定的字段可以是输入文档中的现有字段，也可以是新计算的字段。

慢查询
db.getProfilingStatus()/ db.setProfilingLevel(2) 
打开慢查询日志开关，level：2 代表记录所有查询，忽略阈值
db.system.profile.find().limit(10) 查

当前所有连接
db.getSiblingDB("admin").aggregate([{$currentOp: {allUsers: true, idleSessions : true, localOps: true}}])

$elementMatch 子属性全部匹配


假设mongo中有以下数据
db.students.insert([
    {
        "name": "appple",
        "color": [
            "red",
            "green"
        ]
    },
    {
        "name": "mongo",
        "color": [
            "yellow",
            "green"
        ]
    }
])
db.students.find({color:"red"}) 返回apple
db.students.find({color:"red"}) 返回apple 返回apple,  mongo
db.students.find({$and:[{color:"red"},{color:"green"}]}) 返回apple
db.students.find({color:["green", "red"]}) 什么都不返回


$month, 可以格式化 date属性，输出月份，但只能在管道中使用，所以筛选中某个月份的数据，$project，然后$match


db.users.aggregate([
  {$match: {gender: 'female'}},
  {$group: {
    _id: '$department',
    emp_qty: {$sum: 1}
  }},
  {$match: {emp_qty:{$lt: 10}}}
])

select department, count(1) as emp_qty
from users
where gender = 'female'
group by department
having count(1) < 10

// group by 多个字段
db.getCollection('supplies').aggregate(
  [
    {
      $group: { _id: { a: '$qty', b: '$price' } }
    },
    {
      $project: {
        a: '$_id.a',
        b: '$_id.b',
        q: { $sum: 1 }
      }
    }
  ],
  { maxTimeMS: 60000, allowDiskUse: true }
);

db.products.aggregate([{
  $bucket: {
    groupBy: "$price",
    boundaries: [0,10,20,30],
    default: 'other',
    ouput:{"count":{$sum:1}}
  }
}])

$lookup 连表查询，会把关系强制转成数组，即使localField 不是数组
左外关联，右表数据查不到则不显示(直接忽略，不会有null)
db.contacts.aggregate([
    {
        $lookup: {
            from: "groups", // 不能是分片表
            localField: "groups_id",
            foreignField: "group_id",
            as: "groups"
        }
    }
])

db.contacts.aggregate([
    {
        $lookup: {
            from: "address",
            localField: "address_id",
            foreignField: "address_id",
            as: "address"
        }
    }
])

journal

rs.reconfig(conf) 运行时修改rs.conf()
集群写, 有延迟复制节点的情况下, wtimeout触发, 但实际上仍会写入

从库，db.fsyncLock 会阻止数据库写入，不管writeConcern设置的是什么

单节点的多次更新同一条数据，怎么控制并发，只有开启了事务才需要处理(多个事务更新同一条记录会失败)

writeConcern, readConcern, readPref

readConcern:linearizable 读取所有节点 只针对单个文档

changstream, resumeAfter断点重试 -- 类似消息队列

有ttl索引

serverStatus

分片集群的均衡器是什么



